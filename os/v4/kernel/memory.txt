
namespace Memory {


struct heapEntry {
  int len,
  int owner, //0 if unallocated
  heapEntry next,
  heapEntry prev,
  heapEntry nextGap,
  heapEntry prevGap
};

define heapEntry firstGap = null;

define int totalAllocLen = 0;
define int totalOverhead = 0;
define int availableMem = 0;


function stackless void init(
  int heapMin, int heapMax
){
  availableMem = heapMax - heapMin;
  firstGap = {heapEntry}heapMin;
  firstGap->len =
    availableMem - heapEntry.length;
  firstGap->next = null;
  firstGap->prev = null;
  firstGap->nextGap = null;
  firstGap->prevGap = null;
  firstGap->owner = 0;
};

function stackless int allocate(
  int length, int owner
){
  //check for null owner
  if(owner == 0){
    call Errors.nullOwner(length);
  };

  //find usable entry
  define heapEntry target = firstGap;
  while(
    //split required
    target->len <
    length + heapEntry.length
    //perfect fill
    & target->len != length
  ){
    target = target->nextGap;
    if(target == null){
      call Errors.unableToAlloc(length,owner);
    };
  };

  //split entry
  if(target->len != length){
    //get new entry address
    define heapEntry split = null;
    split = {heapEntry}(
      {int}target + heapEntry.length + length
    );

    //set length
    split->len = target->len -
      (length + heapEntry.length);
    
    //splice into entries
    split->next = target->next;
    split->prev = target;
    target->next = split;
    if(split->next != null){
      split->next->prev = split;
    };

    //replace in gap list
    split->nextGap = target->nextGap;
    split->prevGap = target->prevGap;
    if(split->nextGap != null){
      split->nextGap->prevGap = split;
    };
    if(split->prevGap != null){
      split->prevGap->nextGap = split;
    } else {
      firstGap = split;
    };
  } else {
    if(target->nextGap != null){
      target->nextGap->prevGap = target->prevGap;
    };
    if(target->prevGap != null){
      target->prevGap->nextGap = target->nextGap;
    } else {
      firstGap = target->nextGap;
      if(target->nextGap == null){
        call Errors.pFilled(length,owner);
      };
    };
  };

  //update length
  target->len = length;

  //update owner
  target->owner = owner;

  //update stats
  totalAllocLen = totalAllocLen + length;
  totalOverhead = totalOverhead + heapEntry.length;

  //return
  return = ({int}target) + heapEntry.length;
};

function stackless void free(heapEntry all){
  all = {heapEntry}({int}all - heapEntry.length);
  all->owner = 0;

  //update stats
  totalAllocLen = totalAllocLen - all->len;
  totalOverhead = totalOverhead - heapEntry.length;

  define bool gapListUpdateRequired = true;

  if(all->next != null){
    if(all->next->owner == 0){
      //update length
      all->len =
        all->len +
        all->next->len +
        heapEntry.length;
      
      //splice gap list
      all->prevGap = all->next->prevGap;
      all->nextGap = all->next->nextGap;
      if(all->prevGap != null){
        if(all->prev != all->prevGap){
          all->prevGap->nextGap = all;
        } else {
          all->prevGap->nextGap = all->nextGap;
        };
      } else {
        firstGap = all;
      };
      if(all->nextGap != null){
        if(all->prev != all->nextGap){
          all->nextGap->prevGap = all;
        } else {
          all->nextGap->prevGap = all->prevGap;
        };
      };

      //splice entry list
      all->next = all->next->next;
      if(all->next != null){
        all->next->prev = all;
      };

      //no gap list update required
      gapListUpdateRequired = false;
    };
  };

  if(all->prev != null){
    if(all->prev->owner == 0){
      //update length
      all->prev->len = 
        all->prev->len +
        all->len +
        heapEntry.length;
      
      //splice entry list
      all->prev->next = all->next;
      if(all->next != null){
        all->next->prev = all->prev;
      };

      //no gap list update required
      gapListUpdateRequired = false;
    };
  };

  if(gapListUpdateRequired){
    all->prevGap = null;
    all->nextGap = firstGap;
    firstGap->prevGap = all;
    firstGap = all;
  };
};


namespace Errors {
  function stackless void unableToAlloc(
    int length, int owner
  ){
    unableMR[0] = length;
    unableMR[1] = owner;
    call Log.printf(unableM,unableMR);
    call stats();
    call hang();
  };
  define array[char] unableM =
    "\nMemory full - could not allocate slot of length % for owner %\n";
  define array[int] unableMR = 2;

  function stackless void pFilled(
    int length, int owner
  ){
    filledMR[0] = length;
    filledMR[1] = owner;
    call Log.printf(filledM,filledMR);
    call stats();
    call hang();
  };
  define array[char] filledM =
    "\nMemory perfectly filled! - could not allocate slot of length % for owner %\n";
  define array[int] filledMR = 2;

  function stackless void nullOwner(
    int length
  ){
    nullOwnerMR[0] = length;
    call Log.printf(nullOwnerM,nullOwnerMR);
    call stats();
    call hang();
  };

  define array[char] nullOwnerM =
    "Attempted allocation of length % had owner of null";
  define array[int] nullOwnerMR = 1;

  function stackless void stats(){
    define int totalUsed = null;
    totalUsed = totalAllocLen + totalOverhead;
    statsMR[0] = totalAllocLen;
    statsMR[1] = totalOverhead;
    statsMR[2] = availableMem - totalUsed;
    statsMR[3] = totalUsed;
    statsMR[4] = availableMem;
    call Log.printf(statsM,statsMR);
  };
  define array[char] statsM =
    "Allocator stats:\n  Allocated: %\n  Overhead: %\n  Free: %\n  Used: %/%\n";
  define array[int] statsMR = 5;
};


};
