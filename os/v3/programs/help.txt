
meta header userspace;

struct changePointers {
  array[char] toPath,
  array[char] param
};

struct loadPointersS {
  int diskAdr,
  array[char] dest
};

define array[char] changePath
  = "/Programs/shell";

define array[char] changeParam = 0;

define changePointers returnToShell
  = {toPath: changePath, param: changeParam}; 

define array[char] targetPath =
  "/Lib/help-text";

define array[int] targetHeader = 256;

define loadPointersS loadPointers =
  {diskAdr: null, dest: null};

define array[char] curDataBlock = 256;

function stackless void MAIN(){
  //Get the taget file's disk address
  define int targetAdr = null;
  asm "!defU kCall 8 targetPath";
  asm "TRS #4,MAIN.targetAdr";
  
  //load the target file's header
  loadPointers->diskAdr = targetAdr;
  loadPointers->dest = targetHeader;
  asm "!defU kCall 7 loadPointers";

  //loop through data blocks
  define int dataBlockIndex = 1;
  while(!(targetHeader[dataBlockIndex] == 0)){
    //load the data block
    loadPointers->diskAdr
      = targetHeader[dataBlockIndex];
    loadPointers->dest = curDataBlock;
    asm "!defU kCall 7 loadPointers";

    //print it
    define char curChar = null;
    for(define int i = 0; i < 256; i = i + 1){
      curChar = curDataBlock[i];
      if(curChar == null){
        i = 256;
      } else {
        asm "!defU kCall 0 MAIN.curChar";
      };
    };

    //next data block
    dataBlockIndex = dataBlockIndex + 1;
  };

  //add final \n
  asm "!defU kCall 0 10";

  //return to the shell
  asm "!defU kCall 3 returnToShell";
};

function stackless void INTERRUPT(){
  //ignore character input
  while(true){asm "!defU kCall 1 0";};
};
