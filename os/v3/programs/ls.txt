
meta header userspace;

struct changePointers {
  array[char] toPath,
  array[char] param
};

define array[char] changePath
  = "/Programs/shell";

define array[char] changeParam = 0;

define changePointers returnToShell
  = {toPath: changePath, param: changeParam}; 

define array[char] cwd = 256;

struct loadPointersS {
  int diskAdr,
  array[char] dest
};

define loadPointersS loadPointers
  = {diskAdr: null, dest: null};

define array[char] dataBlock = 256;

define array[char] childHeader = 256;

define array[char] typeDir = "Directory";
define array[char] typeExe = "Executable";
define array[char] typeTxt = "ASCII Text";

define array[array[char]] typeLUT
  = [typeDir,typeExe,typeTxt];

define array[char] separator = " | ";

function stackless void MAIN(){
  //load the CWD
  asm "!defU kCall 5 cwd";

  //get it's disk address
  define int cwdAdr = 0;
  asm "!defU kCall 8 cwd";
  asm "TRS #4,MAIN.cwdAdr";

  //load the CWD directory header
  set loadPointers->diskAdr = cwdAdr;
  set loadPointers->dest = cwd;
  asm "!defU kCall 7 loadPointers";

  //loop through the CWD header data blocks
  define int dataBlockIndex = 1;
  define int childIndex = 0;
  while(!(cwd[dataBlockIndex] == null)){
    //load the data block
    set loadPointers->diskAdr = cwd[dataBlockIndex];
    set loadPointers->dest = dataBlock;
    asm "!defU kCall 7 loadPointers";

    //loop through children
    while(!(dataBlock[childIndex] == null)){
      //load the child header
      set loadPointers->diskAdr
        = dataBlock[childIndex];
      set loadPointers->dest = childHeader;
      asm "!defU kCall 7 loadPointers";

      //print the file type
      call printStr(typeLUT[childHeader[0]],0);

      //print " | ";
      call printStr(separator,0);

      //print file name
      define int nameIndex = 1;
      while(!(childHeader[nameIndex] == null)){
        set nameIndex = nameIndex + 1;
      };
      set nameIndex = nameIndex + 1;
      call printStr(childHeader,nameIndex);

      //add a \n
      asm "!defU kCall 0 10";

      //next child
      set childIndex = childIndex + 1;
    };

    //next data block
    set dataBlockIndex = dataBlockIndex + 1;
  };

  //return to the shell
  asm "!defU kCall 3 returnToShell";
};

function stackless void printStr(
  array[char] str, int index
){
  define char curChar = null;
  while(!(str[index] == null)){
    set curChar = str[index];
    asm "!defU kCall 0 printStr.curChar";
    set index = index + 1;
  };
};

function stackless void INTERRUPT(){
  //ignore character input
  asm "!defU kCall 1 0";
};
