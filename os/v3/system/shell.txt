
meta header userspace;

struct changePointers {
  array[char] toPath,
  array[char] param
};

define array[char] changePath = 256;

define array[char] changeParam = 256;

define changePointers nextProgram
  = {toPath: changePath, param: changeParam}; 

define array[char] cwd = 256;

define array[char] prompt = " > ";

define bool takingInput = true;

define int pathEnd = 0;
define int paramEnd = 0;

define array[char] pathStart = "/Programs/";

define bool readingName = true;

function stackless void MAIN(){
  //initialise the change path
  while(
    pathEnd < pathStart->length
  ){
    changePath[pathEnd] = pathStart[pathEnd];
    pathEnd = pathEnd + 1;
  };

  //load the CWD
  asm "!defU kCall 5 cwd";

  //print it
  call printStr(cwd,0);

  //print the prompt
  call printStr(prompt,0);

  //wait for input
  asm "TRS 2,LCD";
  while(takingInput){};
  asm "TRS 1,LCD";

  //Load the next program
  asm "!defU kCall 3 nextProgram";
};

function stackless void printStr(
  array[char] str, int index
){
  define char curChar = null;
  while(!(str[index] == null)){
    curChar = str[index];
    asm "!defU kCall 0 printStr.curChar";
    index = index + 1;
  };
};

function stackless void INTERRUPT(){
  while(true){
    if(takingInput){
      //read the character
      define char curChar = null;
      asm "!defU kCall 2 0";
      asm "TRS #4,INTERRUPT.curChar";

      //print it
      asm "!defU kCall 0 INTERRUPT.curChar";

      //handle it
      if(curChar == {char}10){
        //\n, done taking input
        takingInput = false;
      } elif(readingName){
        //reading command name

        //check for space
        if(curChar == " "){
          //is space, switch to reading param
          readingName = false;
        } else {
          //normal char, add to name
          changePath[pathEnd] = curChar;
          pathEnd = pathEnd + 1;
        };
      } else {
        //reading command parameter
        changeParam[paramEnd] = curChar;
        paramEnd = paramEnd + 1;
      };
    };

    //clear the character
    asm "!defU kCall 1 0";
  };
};
