
meta header kernel;

define array[char] cwd = 256;
define array[char] userParam = 256;

define array[char] introMessage = 
"Welcome to ERISC OS 3.0\nRun \"help\" for help\n\n";

define array[char] initProgramPath
  = "/Programs/shell";

define array[char] miscHeader = 256;

define int kernelLength = 0xe00;

define array[char] dataBlock = 256;

define array[char] childHeader = 256;

define array[char] evalPathNotFound
  = "\nNonexistant Path:\n";

define bool inInterrupt = false;

define int mainReturn = 0;

define array[char] kfNotFound
  = "Unkown kernel function ID: ";

define int storedALUA = null;
define int storedALUB = null;
define int storedALUC = null;

function stackless void MAIN(){
  //status update (working)
  asm "TRS 1,LCD";

  //initialise cwd
  cwd[0] = "/";
  cwd[1] = {char}0;

  //print the intro message
  call printString(introMessage);

  //enable interrupts
  asm "TRS INTERRUPT,PC2";

  //run the inital program
  call runFile(initProgramPath);
};

function stackless void USERRET(){
  //get function id and parameter
  define int functionId = 0;
  define int functionParam = 0;
  asm "TRS ALU-A,USERRET.functionId";
  asm "TRS ALU-B,USERRET.functionParam";
  
  //interrupt logic
  define bool restoreInterruptFlag = false;
  if(inInterrupt){
    //reset the interrupt flag
    inInterrupt = false;
    restoreInterruptFlag = true;

    //restore the last return address
    define int iReturn = 0;
    iReturn = ({array[int]}kernelLength)[2];
    kernelLength[2] = mainReturn;
  };

  //return value
  define int returnValue = null;

  //run function
  if(functionId == 0){
    //print character
    asm "TRS USERRET.functionParam,TTY";
  } elif(functionId == 1){
    //clear character

    //restore ALU
    asm "TRS storedALUA,ALU-A";
    asm "TRS storedALUB,ALU-B";
    asm "TRS storedALUC,ALU-C";

    //clear the character
    asm "TRS 0,KBD";
  } elif(functionId == 2){
    //read character
    asm "TRS KBD,USERRET.returnValue";
  } elif(functionId == 3){
    //change program

    //get path and parameter strings
    define array[char] path = null;
    define array[char] param = null;
    path = 
      ({array[int]}kernelLength)[functionParam]
      + kernelLength;
    param = 
      ({array[int]}kernelLength)[functionParam + 1]
      + kernelLength;
    
    //copy the parameter string
    call copyString(param,userParam);

    //run the program
    call runFile(path);
  } elif(functionId == 4){
    //load parameter
    call copyString(
      userParam,
      kernelLength + functionParam
    );
  } elif(functionId == 5){
    //load CWD
    call copyString(
      cwd,kernelLength + functionParam
    );
  } elif(functionId == 6){
    //update CWD
    call copyString(
      kernelLength + functionParam,cwd
    );
  } elif(functionId == 7){
    //load block

    //get block index and destination
    define int blockIndex = 0;
    blockIndex = 
      ({array[int]}kernelLength)[functionParam];
    define int dest = 0;
    dest = 
      ({array[int]}kernelLength)[functionParam + 1]
      + kernelLength;

    //load the block
    asm "!defU LoadFromDisk 256 USERRET.blockIndex USERRET.dest";
  } elif(functionId == 8){
    //evaluate path
    returnValue = evalPath(
      functionParam + kernelLength
    );
  } else {
    call printString(kfNotFound);
    asm "TRS USERRET.functionId,TTY";
    asm "TRS 2,LCD";
    while(true){};
  };

  if(restoreInterruptFlag){
    //restore the interrupt flag
    inInterrupt = true;

    //reset the return address
    kernelLength[2] = iReturn;
  };

  //update the return value
  kernelLength[4] = returnValue;

  //return the the user program
  asm "!defU EnterUser kernelLength";
};

function stackless void INTERRUPT(){
  //store the ALU contents
  asm "TRS ALU-A,storedALUA";
  asm "TRS ALU-B,storedALUB";
  asm "TRS ALU-C,storedALUC";
  
  //set the interrupt flag
  inInterrupt = true;

  //store the current program's return address
  mainReturn = ({array[int]}kernelLength)[2];

  //set it to run the interrupt handler
  kernelLength[2] = 4;

  //enter the user program
  asm "!defU EnterUser kernelLength";
};

function stackless void printString(array[char] str){
  define int index = 0;
  define char curChar = null;
  while(!(str[index] == {char}0)){
    curChar = str[index];
    asm "TRS printString.curChar,TTY";
    index = index + 1;
  };
};

function stackless int evalPath(array[char] path){
  define int fsScan = kernelLength;
  define int pathScan = 1;
  while(!(path[pathScan] == {char}0)){
    //load the current directory's header
    asm "!defU LoadFromDisk 256 evalPath.fsScan miscHeader";

    define bool searching = true;

    //loop through data blocks
    define int dataBlockScan = 1;
    while(
      !(miscHeader[dataBlockScan] == {char}0)
      & searching
    ){
      //load the data block
      define int dataBlockIndex = null;
      dataBlockIndex = miscHeader[dataBlockScan];
      asm "!defU LoadFromDisk 256 evalPath.dataBlockIndex dataBlock";

      //loop through children
      define int childScan = 0;
      while(
        !(dataBlock[childScan] == {char}0)
        & searching
      ){
        //load the child header
        define int childIndex = null;
        childIndex = dataBlock[childScan];
        asm "!defU LoadFromDisk 256 evalPath.childIndex childHeader";

        //skip data block list
        define int nameScan = 1;
        while(!(childHeader[nameScan] == {char}0)){
          nameScan = nameScan + 1;
        };
        nameScan = nameScan + 1;

        //check for match
        define char curChar = null;
        for(
          define int i = 0;
          !(
            childHeader[nameScan + i] == {char}0
          ) & (
            childHeader[nameScan + i] ==
            path[pathScan + i]
          );
          i = i + 1
        ){};
        if(
          (childHeader[nameScan + i] == {char}0) &
          (
            (path[pathScan + i] == {char}0) |
            (path[pathScan + i] == "/")
          )
        ){
          //match found!
          searching = false;
          pathScan = pathScan + i;
          fsScan = childIndex;
        };

        //next child
        childScan = childScan + 1;
      };

      dataBlockScan = dataBlockScan + 1;
    };

    if(searching){
      call printString(evalPathNotFound);
      call printString(path);
      asm "TRS 2,LCD";
      while(true){};
    } elif(path[pathScan] == "/") {
      pathScan = pathScan + 1;
    };
  };
  return = fsScan;
};

function stackless int loadFile(
  int headerAdr, array[char] loadTo
){
  define int to = loadTo;
  //words loaded
  define int wordsLoaded = 0;

  //load the file's header
  define int temp = headerAdr;
  asm "!defU LoadFromDisk 256 loadFile.temp miscHeader";

  //loop over data blocks
  define int dataBlockIndex = 1;
  define int loadSource = null;
  while(!(miscHeader[dataBlockIndex] == {char}0)){
    //load the data block
    loadSource = miscHeader[dataBlockIndex];
    asm "!defU LoadFromDisk 256 loadFile.loadSource loadFile.to";

    //update words loaded / to
    wordsLoaded = wordsLoaded + 256;
    to = to + 256;

    //next data block
    dataBlockIndex = dataBlockIndex + 1;
  };

  return = wordsLoaded;
};

function stackless void runFile(array[char] path){
  //find the program
  define int progLoc = null;
  progLoc = evalPath(path);
  
  //load it
  call loadFile(progLoc,kernelLength);

  //and run it
  asm "!defU EnterUser kernelLength";
};

function stackless void copyString(
  array[char] from, array[char] to
){
  define int index = 0;
  while(!(from[index] == {char}0)){
    to[index] = from[index];
    index = index + 1;
  };
  //copy terminating null
  to[index] = null;
};
